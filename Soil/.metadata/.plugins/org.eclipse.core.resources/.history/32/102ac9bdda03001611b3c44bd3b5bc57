package treeSearch;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;

public class EliminationOfNoiseData {
	ExcelReader excelReaderObj = new ExcelReader(
			"E://Akash/java/Soil/FeatureExtract/Demo.xlsx");
	ArrayList<InputClass> totalInputFile = excelReaderObj.getInputClass();
	Set<Integer> StoreIndices; 
	ArrayList<ArrayList<Integer>> TotalInputFile = new ArrayList<ArrayList<Integer>>();
	ArrayList<Integer> ClusterList = new ArrayList<Integer>();
	private Integer MaximumNumOfCluster;
	
	public EliminationOfNoiseData() {
		setTotalInputFile();
		PrintList();
		StoreEliminationIndices();
		//EliminationOfNoiseData();
	}

	public void setTotalInputFile() {
		for (int row = 0; row < totalInputFile.size(); row++) {
			ArrayList<Integer> Demo = new ArrayList<Integer>();
			for (Map.Entry<String, Integer> itr : totalInputFile.get(row)
					.getFeatures().entrySet()) {
				Demo.add(itr.getValue());

			}
			ClusterList.add(totalInputFile.get(row).getClusterNumber());
			TotalInputFile.add(Demo);
		}
		this.MaximumNumOfCluster = Collections.max(ClusterList);
	}

	public void PrintList() {
		for (int i = 0; i < TotalInputFile.size(); i++) {
			for (int j = 0; j < TotalInputFile.get(i).size(); j++) {
				System.out.print(TotalInputFile.get(i).get(j) + " ");
			}
			System.out.print(ClusterList.get(i));
			System.out.println();
		}
		System.out.println("Cluster Max: "+MaximumNumOfCluster);

	}

	public void StoreEliminationIndices() {
		
		for (int ClusterNumber = 1; ClusterNumber <= MaximumNumOfCluster; ClusterNumber++) {
			
			for (int Column = 0;!TotalInputFile.isEmpty() &&  Column <TotalInputFile.get(0).size(); Column++) {
				int Counter = 0;
				int ClusterCounter =0;
				StoreIndices = new HashSet<Integer>();
				for (int Row = 0; Row < TotalInputFile.size(); Row++) {
					if (ClusterList.get(Row) == ClusterNumber){
							if(TotalInputFile.get(Row).get(Column) == 1) {
									Counter++;
							}
							ClusterCounter++;
					}
				}
				//float ColumnPercentage = ((float) (Counter) / TotalInputFile.size());
				//System.out.println(ColumnPercentage+" ");
				//System.out.println(TotalInputFile.size());
				double ExpectedValue = (double) ((70*ClusterCounter/100.00));
				System.out.print("Expected Value : "+ ExpectedValue+" ");
				System.out.println("Counter : "+ Counter);
						
				if (Counter>=Math.floor(ExpectedValue)) {
					System.out.println(Column+"Found");
					for (int Row = 0; Row < TotalInputFile.size(); Row++) {
						if (ClusterList.get(Row) == ClusterNumber
								&& TotalInputFile.get(Row).get(Column) == 0) {
							
							
							StoreIndices.add(Row);
						}
					}
				}
				
//				Comparator<Set> comparator = new Comparator<Set>() {
//					
//					
//
//					@Override
//					public int compare(Set o1, Set o2) {
//						// TODO Auto-generated method stub
//						
//					}
//				};
				
				Object[] array = StoreIndices.toArray();
				
				for(int i=array.length-1;i>=0;i--){
					System.out.println(i);
					TotalInputFile.remove(i);
					ClusterList.remove(i);
				}
			}
			System.out.println("SizeOf total input file:" +TotalInputFile.size());
		}
	}
}
//	public void EliminationOfNoiseData(){
//		for(Integer value : StoreIndices){
//			System.out.println(value);
//		}
//		
////		for(int i=0;i<totalInputFile.size();i++){
////			totalInputFile.remove(StoreIndices.g);
////			
////		}
//		
//	}
//	
//}
